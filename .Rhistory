summarise(dis_total = median(dis_total),
sd = median(sd),
validos = median(Validos),
diferencia = median(diferencia))
# Examinar las diez primeras filas
head(javelin_totals, n=10)
normalizar <- function (resultado) {
(resultado - min(resultado)) / (max(resultado) - min(resultado))
}
aggstats <- c("TotalDistance", "StandardDev", "Success", "diff")
M = length(javelin_totals$Athlete)
javelin_norm <- data.frame(Athlete = javelin_totals$Athlete,
TotalDistance = rep(NA, M),
StandardDev = rep(NA, M),
Success = rep(NA, M),
diff = rep(NA, M))
javelin_norm$TotalDistance <- normalizar(javelin_totals$dis_total)
javelin_norm$StandardDev <- normalizar(javelin_totals$sd)
javelin_norm$Success <- normalizar(javelin_totals$validos)
javelin_norm$diff <- normalizar(javelin_totals$diferencia)
javelin_norm%>%
arrange(desc(TotalDistance))%>%
head()
manual = readline('¿Desea ponderar de forma manual? Elija S para Sí y N para No): ')
if (manual == 'S' | manual == 's'){
print('Recuerde que la suma de las ponderaciones debe ser 100')
distancia = as.integer(readline('Ingrese su ponderacion para la distancia: '))
variabilidad = as.integer(readline('Ingrese su ponderacion para la variabilidad: '))
exitos = as.integer(readline('Ingrese su ponderacion para los exitos: '))
diferencia = as.integer(readline('Ingrese su ponderacion para la diferencia: '))
} else {
print('La ponderacion sera aleatoria')
peso = c(0,0,0,0)
while (sum(peso) != 100){
peso[1] <- sample(0:100, 1)
if (sum(peso)==100) break
peso[2] <- sample(0:(100-sum(peso)), 1)
if (sum(peso)==100) break
peso[3] <- sample(0:(100-sum(peso)), 1)
if (sum(peso)==100) break
peso[4] <- 100-sum(peso)
}
distancia = peso[1]
variabilidad = peso[2]
exitos = peso[3]
diferencia = peso[4]
}
cat("Peso de Equipo
Home: Distancia: ", distancia,
"Variabilidad: ", variabilidad,
"Exitos: ", exitos,
"Diferencia: ", diferencia)
weights <- c(distancia, variabilidad, exitos, diferencia)
javelin_team <- javelin_norm %>%
mutate(seleccion = (TotalDistance*distancia)+(StandardDev*variabilidad)+(Success*exitos)+(diff*diferencia))%>%
arrange(desc(seleccion))%>%
head(5)
javelin_team
team_stats <- javelin_totals %>%
inner_join(javelin_team, by = "Athlete")%>%
arrange(desc(seleccion))
pool_stats <- data.frame(do.call('cbind',
sapply(javelin_totals,
function(x) if(is.numeric(x)) c(max(x), mean(x)))))
pool_stats$MaxAve <- c("Maximum", "Average")
pool_stats <- pool_stats %>%
gather(key="Statistic", value="Aggregate", -MaxAve)
# Examinar las estadísticas del equipo
poolteam_stats <- data.frame(do.call('cbind',
sapply(team_stats%>%
select(Athlete, dis_total, sd, validos, diferencia),
function(x) if(is.numeric(x)) c(max(x), mean(x)))))
poolteam_stats$MaxAve <- c("Maximum", "Promedio")
poolteam_stats <- poolteam_stats %>%
gather(key="Statistic", value="Aggregate", -MaxAve)
library(gridExtra)
vector_dis <- pool_stats%>%filter(Statistic=="dis_total")
vector_sd <- pool_stats%>%filter(Statistic=="sd")
vector_validos <- pool_stats%>%filter(Statistic=="validos")
vector_diferencia <- pool_stats%>%filter(Statistic=="diferencia")
p1 <- team_stats %>%
select(Athlete, dis_total, sd, validos, diferencia)%>%
gather(key="Statistic", value="Aggregate", -Athlete)%>%
filter(Athlete==team_stats$Athlete[1], Statistic=="dis_total")%>%
ggplot(.,aes(x=Statistic, weights=Aggregate))+
geom_bar()+
geom_hline(data=vector_dis, aes(yintercept=Aggregate,
group=Statistic, color=MaxAve), size=1) +
labs(title = team_stats$Athlete[1])+
scale_fill_hue(l=70) +
scale_color_hue(l=20) +
theme_minimal() +
theme(axis.text.x=element_text(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position = "none")
p2 <- team_stats %>%
select(Athlete, dis_total, sd, validos, diferencia)%>%
gather(key="Statistic", value="Aggregate", -Athlete)%>%
filter(Athlete==team_stats$Athlete[1], Statistic=="sd")%>%
ggplot(.,aes(x=Statistic, weights=Aggregate))+
geom_bar()+
geom_hline(data=vector_sd, aes(yintercept=Aggregate,
group=Statistic, color=MaxAve), size=1) +
labs(title = "")+
scale_fill_hue(l=70) +
scale_color_hue(l=20) +
theme_minimal() +
theme(axis.text.x=element_text(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position = "none")
p3 <- team_stats %>%
select(Athlete, dis_total, sd, validos, diferencia)%>%
gather(key="Statistic", value="Aggregate", -Athlete)%>%
filter(Athlete==team_stats$Athlete[1], Statistic=="validos")%>%
ggplot(.,aes(x=Statistic, weights=Aggregate))+
geom_bar()+
geom_hline(data=vector_validos, aes(yintercept=Aggregate,
group=Statistic, color=MaxAve), size=1) +
labs(title = "")+
scale_fill_hue(l=70) +
scale_color_hue(l=20) +
theme_minimal() +
theme(axis.text.x=element_text(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position = "none")
p4 <- team_stats %>%
select(Athlete, dis_total, sd, validos, diferencia)%>%
gather(key="Statistic", value="Aggregate", -Athlete)%>%
filter(Athlete==team_stats$Athlete[1], Statistic=="diferencia")%>%
ggplot(.,aes(x=Statistic, weights=Aggregate))+
geom_bar()+
geom_hline(data=vector_diferencia, aes(yintercept=Aggregate,
group=Statistic, color=MaxAve), size=1) +
labs(title = '')+
scale_fill_hue(l=70) +
scale_color_hue(l=20) +
theme_minimal() +
theme(axis.text.x=element_text(),
axis.title.x=element_blank(),
axis.title.y=element_blank())
p5 <- team_stats %>%
select(Athlete, dis_total, sd, validos, diferencia)%>%
gather(key="Statistic", value="Aggregate", -Athlete)%>%
filter(Athlete==team_stats$Athlete[2], Statistic=="dis_total")%>%
ggplot(.,aes(x=Statistic, weights=Aggregate))+
geom_bar()+
geom_hline(data=vector_dis, aes(yintercept=Aggregate,
group=Statistic, color=MaxAve), size=1) +
labs(title = team_stats$Athlete[2])+
scale_fill_hue(l=70) +
scale_color_hue(l=20) +
theme_minimal() +
theme(axis.text.x=element_text(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position = "none")
p6 <- team_stats %>%
select(Athlete, dis_total, sd, validos, diferencia)%>%
gather(key="Statistic", value="Aggregate", -Athlete)%>%
filter(Athlete==team_stats$Athlete[2], Statistic=="sd")%>%
ggplot(.,aes(x=Statistic, weights=Aggregate))+
geom_bar()+
geom_hline(data=vector_sd, aes(yintercept=Aggregate,
group=Statistic, color=MaxAve), size=1) +
labs(title = '')+
scale_fill_hue(l=70) +
scale_color_hue(l=20) +
theme_minimal() +
theme(axis.text.x=element_text(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position = "none")
p7 <- team_stats %>%
select(Athlete, dis_total, sd, validos, diferencia)%>%
gather(key="Statistic", value="Aggregate", -Athlete)%>%
filter(Athlete==team_stats$Athlete[2], Statistic=="validos")%>%
ggplot(.,aes(x=Statistic, weights=Aggregate))+
geom_bar()+
geom_hline(data=vector_validos, aes(yintercept=Aggregate,
group=Statistic, color=MaxAve), size=1) +
labs(title = '')+
scale_fill_hue(l=70) +
scale_color_hue(l=20) +
theme_minimal() +
theme(axis.text.x=element_text(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position = "none")
p8 <- team_stats %>%
select(Athlete, dis_total, sd, validos, diferencia)%>%
gather(key="Statistic", value="Aggregate", -Athlete)%>%
filter(Athlete==team_stats$Athlete[2], Statistic=="diferencia")%>%
ggplot(.,aes(x=Statistic, weights=Aggregate))+
geom_bar()+
geom_hline(data=vector_diferencia, aes(yintercept=Aggregate,
group=Statistic, color=MaxAve), size=1) +
labs(title = '')+
scale_fill_hue(l=70) +
scale_color_hue(l=20) +
theme_minimal() +
theme(axis.text.x=element_text(),
axis.title.x=element_blank(),
axis.title.y=element_blank())
p9 <- team_stats %>%
select(Athlete, dis_total, sd, validos, diferencia)%>%
gather(key="Statistic", value="Aggregate", -Athlete)%>%
filter(Athlete==team_stats$Athlete[3], Statistic=="dis_total")%>%
ggplot(.,aes(x=Statistic, weights=Aggregate))+
geom_bar()+
geom_hline(data=vector_dis, aes(yintercept=Aggregate,
group=Statistic, color=MaxAve), size=1) +
labs(title = team_stats$Athlete[3])+
scale_fill_hue(l=70) +
scale_color_hue(l=20) +
theme_minimal() +
theme(axis.text.x=element_text(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position = "none")
p10 <- team_stats %>%
select(Athlete, dis_total, sd, validos, diferencia)%>%
gather(key="Statistic", value="Aggregate", -Athlete)%>%
filter(Athlete==team_stats$Athlete[3], Statistic=="sd")%>%
ggplot(.,aes(x=Statistic, weights=Aggregate))+
geom_bar()+
geom_hline(data=vector_sd, aes(yintercept=Aggregate,
group=Statistic, color=MaxAve), size=1) +
labs(title = '')+
scale_fill_hue(l=70) +
scale_color_hue(l=20) +
theme_minimal() +
theme(axis.text.x=element_text(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position = "none")
p11 <- team_stats %>%
select(Athlete, dis_total, sd, validos, diferencia)%>%
gather(key="Statistic", value="Aggregate", -Athlete)%>%
filter(Athlete==team_stats$Athlete[3], Statistic=="validos")%>%
ggplot(.,aes(x=Statistic, weights=Aggregate))+
geom_bar()+
geom_hline(data=vector_validos, aes(yintercept=Aggregate,
group=Statistic, color=MaxAve), size=1) +
labs(title = '')+
scale_fill_hue(l=70) +
scale_color_hue(l=20) +
theme_minimal() +
theme(axis.text.x=element_text(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position = "none")
p12 <- team_stats %>%
select(Athlete, dis_total, sd, validos, diferencia)%>%
gather(key="Statistic", value="Aggregate", -Athlete)%>%
filter(Athlete==team_stats$Athlete[3], Statistic=="diferencia")%>%
ggplot(.,aes(x=Statistic, weights=Aggregate))+
geom_bar()+
geom_hline(data=vector_diferencia, aes(yintercept=Aggregate,
group=Statistic, color=MaxAve), size=1) +
labs(title = '')+
scale_fill_hue(l=70) +
scale_color_hue(l=20) +
theme_minimal() +
theme(axis.text.x=element_text(),
axis.title.x=element_blank(),
axis.title.y=element_blank())
p13 <- team_stats %>%
select(Athlete, dis_total, sd, validos, diferencia)%>%
gather(key="Statistic", value="Aggregate", -Athlete)%>%
filter(Athlete==team_stats$Athlete[4], Statistic=="dis_total")%>%
ggplot(.,aes(x=Statistic, weights=Aggregate))+
geom_bar()+
geom_hline(data=vector_dis, aes(yintercept=Aggregate,
group=Statistic, color=MaxAve), size=1) +
labs(title = team_stats$Athlete[4])+
scale_fill_hue(l=70) +
scale_color_hue(l=20) +
theme_minimal() +
theme(axis.text.x=element_text(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position = "none")
p14 <- team_stats %>%
select(Athlete, dis_total, sd, validos, diferencia)%>%
gather(key="Statistic", value="Aggregate", -Athlete)%>%
filter(Athlete==team_stats$Athlete[4], Statistic=="sd")%>%
ggplot(.,aes(x=Statistic, weights=Aggregate))+
geom_bar()+
geom_hline(data=vector_sd, aes(yintercept=Aggregate,
group=Statistic, color=MaxAve), size=1) +
labs(title = '')+
scale_fill_hue(l=70) +
scale_color_hue(l=20) +
theme_minimal() +
theme(axis.text.x=element_text(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position = "none")
p15 <- team_stats %>%
select(Athlete, dis_total, sd, validos, diferencia)%>%
gather(key="Statistic", value="Aggregate", -Athlete)%>%
filter(Athlete==team_stats$Athlete[4], Statistic=="validos")%>%
ggplot(.,aes(x=Statistic, weights=Aggregate))+
geom_bar()+
geom_hline(data=vector_validos, aes(yintercept=Aggregate,
group=Statistic, color=MaxAve), size=1) +
labs(title = '')+
scale_fill_hue(l=70) +
scale_color_hue(l=20) +
theme_minimal() +
theme(axis.text.x=element_text(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position = "none")
p16 <- team_stats %>%
select(Athlete, dis_total, sd, validos, diferencia)%>%
gather(key="Statistic", value="Aggregate", -Athlete)%>%
filter(Athlete==team_stats$Athlete[4], Statistic=="diferencia")%>%
ggplot(.,aes(x=Statistic, weights=Aggregate))+
geom_bar()+
geom_hline(data=vector_diferencia, aes(yintercept=Aggregate,
group=Statistic, color=MaxAve), size=1) +
labs(title = '')+
scale_fill_hue(l=70) +
scale_color_hue(l=20) +
theme_minimal() +
theme(axis.text.x=element_text(),
axis.title.x=element_blank(),
axis.title.y=element_blank())
p17 <- team_stats %>%
select(Athlete, dis_total, sd, validos, diferencia)%>%
gather(key="Statistic", value="Aggregate", -Athlete)%>%
filter(Athlete==team_stats$Athlete[5], Statistic=="dis_total")%>%
ggplot(.,aes(x=Statistic, weights=Aggregate))+
geom_bar()+
geom_hline(data=vector_dis, aes(yintercept=Aggregate,
group=Statistic, color=MaxAve), size=1) +
labs(title = team_stats$Athlete[5])+
scale_fill_hue(l=70) +
scale_color_hue(l=20) +
theme_minimal() +
theme(axis.text.x=element_text(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position = "none")
p18 <- team_stats %>%
select(Athlete, dis_total, sd, validos, diferencia)%>%
gather(key="Statistic", value="Aggregate", -Athlete)%>%
filter(Athlete==team_stats$Athlete[5], Statistic=="sd")%>%
ggplot(.,aes(x=Statistic, weights=Aggregate))+
geom_bar()+
geom_hline(data=vector_sd, aes(yintercept=Aggregate,
group=Statistic, color=MaxAve), size=1) +
labs(title = '')+
scale_fill_hue(l=70) +
scale_color_hue(l=20) +
theme_minimal() +
theme(axis.text.x=element_text(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position = "none")
p19 <- team_stats %>%
select(Athlete, dis_total, sd, validos, diferencia)%>%
gather(key="Statistic", value="Aggregate", -Athlete)%>%
filter(Athlete==team_stats$Athlete[5], Statistic=="validos")%>%
ggplot(.,aes(x=Statistic, weights=Aggregate))+
geom_bar()+
geom_hline(data=vector_validos, aes(yintercept=Aggregate,
group=Statistic, color=MaxAve), size=1) +
labs(title = '')+
scale_fill_hue(l=70) +
scale_color_hue(l=20) +
theme_minimal() +
theme(axis.text.x=element_text(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position = "none")
p20 <- team_stats %>%
select(Athlete, dis_total, sd, validos, diferencia)%>%
gather(key="Statistic", value="Aggregate", -Athlete)%>%
filter(Athlete==team_stats$Athlete[5], Statistic=="diferencia")%>%
ggplot(.,aes(x=Statistic, weights=Aggregate))+
geom_bar()+
geom_hline(data=vector_diferencia, aes(yintercept=Aggregate,
group=Statistic, color=MaxAve), size=1) +
labs(title = '')+
scale_fill_hue(l=70) +
scale_color_hue(l=20) +
theme_minimal() +
theme(axis.text.x=element_text(),
axis.title.x=element_blank(),
axis.title.y=element_blank())
lay <- rbind(c(1,2,3,4,4),
c(5,6,7,8,8))
grid.arrange(arrangeGrob(grobs= list(p1,p2,p3,p4,p5,p6,p7,p8), layout_matrix = lay, vp = NULL, top = "Comparativo Atletas"))
lay <- rbind(c(1,2,3,4,4),
c(5,6,7,8,8))
grid.arrange(arrangeGrob(grobs= list(p9,p10,p11,p12,p13,p14,p15,p16), layout_matrix = lay, vp = NULL, top = "Comparativo Atletas"))
lay <- rbind(c(1,2,3,4,4))
grid.arrange(arrangeGrob(grobs= list(p17,p18,p19,p20), layout_matrix = lay, vp = NULL, top = "Comparativo Atletas"), heights = c(0.7,1))
p <- team_stats %>%
select(Athlete, dis_total, sd, validos, diferencia) %>%
gather(key="Statistic", value="Aggregate", -Athlete) %>%
ggplot(aes(x=Athlete, y=Aggregate, fill=Athlete)) +
geom_bar(stat="identity", position="dodge") +
facet_wrap(vars(Statistic), scales="free_y") +
geom_hline(data=pool_stats, aes(yintercept=Aggregate, group=Statistic, color=MaxAve), size=1) +
labs(title="AnyTown Athletic Club: Women's Javelin", color="Athlete pool maximum / average") +
scale_fill_hue(l=70) +
scale_color_hue(l=20) +
theme_minimal() +
theme(axis.text.x=element_blank(), axis.title.x=element_blank(), axis.title.y=element_blank())
p
# Ponderación y selección de nuestro equipo
manual = readline('¿Desea ponderar de forma manual? Elija S para Sí y N para No): ')
if (manual == 'S' | manual == 's'){
print('Recuerde que la suma de las ponderaciones debe ser 100')
distancia = as.integer(readline('Ingrese su ponderacion para la distancia: '))
variabilidad = as.integer(readline('Ingrese su ponderacion para la variabilidad: '))
exitos = as.integer(readline('Ingrese su ponderacion para los exitos: '))
diferencia = as.integer(readline('Ingrese su ponderacion para la diferencia: '))
} else {
print('La ponderacion sera aleatoria')
peso = c(0,0,0,0)
while (sum(peso) != 100){
peso[1] <- sample(0:100, 1)
if (sum(peso)==100) break
peso[2] <- sample(0:(100-sum(peso)), 1)
if (sum(peso)==100) break
peso[3] <- sample(0:(100-sum(peso)), 1)
if (sum(peso)==100) break
peso[4] <- 100-sum(peso)
}
distancia = peso[1]
variabilidad = peso[2]
exitos = peso[3]
diferencia = peso[4]
}
cat("Peso de Equipo
Home: Distancia: ", distancia,
"Variabilidad: ", variabilidad,
"Exitos: ", exitos,
"Diferencia: ", diferencia)
weights <- c(distancia, variabilidad, exitos, diferencia)
javelin_team <- javelin_norm %>%
mutate(seleccion = (TotalDistance*distancia)+(StandardDev*variabilidad)+(Success*exitos)+(diff*diferencia))%>%
arrange(desc(seleccion))%>%
head(5)
# Ponderación del equipo visitante
manual = readline('¿Desea ponderar de forma manual? Elija S para Sí y N para No): ')
if (manual == 'S' | manual == 's'){
print('Recuerde que la suma de las ponderaciones debe ser 100')
distancia1 = as.integer(readline('Ingrese su ponderacion para la distancia: '))
variabilidad1 = as.integer(readline('Ingrese su ponderacion para la variabilidad: '))
exitos1 = as.integer(readline('Ingrese su ponderacion para los exitos: '))
diferencia1 = as.integer(readline('Ingrese su ponderacion para la diferencia: '))
} else {
print('La ponderacion sera aleatoria')
peso = c(0,0,0,0)
while (sum(peso) != 100){
peso[1] <- sample(0:100, 1)
if (sum(peso)==100) break
peso[2] <- sample(0:(100-sum(peso)), 1)
if (sum(peso)==100) break
peso[3] <- sample(0:(100-sum(peso)), 1)
if (sum(peso)==100) break
peso[4] <- 100-sum(peso)
}
distancia1 = peso[1]
variabilidad1 = peso[2]
exitos1 = peso[3]
diferencia1 = peso[4]
}
cat("Peso de Equipo
Home: Distancia: ", distancia1,
"Variabilidad: ", variabilidad1,
"Exitos: ", exitos1,
"Diferencia: ", diferencia1)
weights <- c(distancia1, variabilidad1, exitos1, diferencia1)
javelin_team_away <- javelin_norm %>%
mutate(seleccion = (TotalDistance*distancia1)+(StandardDev*variabilidad1)+(Success*exitos1)+(diff*diferencia1))%>%
arrange(desc(seleccion))%>%
#anti_join(javelin_team, by = "Athlete")%>%
head(5)
# Simulación del partido
home <- sample(1:nrow(javelin_team), 3, replace=FALSE)
home <- javelin_team[home,]
home_dis = 0
away <- sample(1:nrow(javelin_team_away), 3, replace=FALSE)
away <- javelin_team_away[away,]
away_dis = 0
for (i in 1:nrow(home)) {
lanz_validos <- round(home$Success[i]*6)
HomeTeam <- javelin_long%>%
filter(Athlete == home$Athlete[i], Valor>0)%>%
summarise(min = min(Valor),
max = max(Valor))
home_dis <- home_dis + sum(sample(HomeTeam$min:HomeTeam$max, lanz_validos, replace = T))
lanz_validos_a <- round(away$Success[i]*6)
AwayTeam <- javelin_long%>%
filter(Athlete == away$Athlete[i], Valor>0)%>%
summarise(min = min(Valor),
max = max(Valor))
away_dis <- away_dis + sum(sample(AwayTeam$min:AwayTeam$max, lanz_validos_a, replace = T))
}
print(home)
print(away)
print(paste0("Javelin match, Final Score: Home: ", home_dis, " - Away: ", away_dis))
ifelse(home_dis > away_dis, print("Win!"), print("Sometimes you just have to take the L."))
